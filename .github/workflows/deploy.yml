name: deploy
on:
  push:
    paths:
      - ".github/workflows/**"
      - "backend/src/**"
      - "backend/build.gradle.kts"
      - "backend/settings.gradle.kts"
      - "backend/Dockerfile"
    branches:
      - main
      - dev
jobs:
  makeTagAndRelease:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.ANIDOC_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ANIDOC_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false

  buildImageAndPush:
    name: 도커 이미지 빌드와 푸시
    needs: makeTagAndRelease
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE_NAME: anidoc ###!!!팀 프로젝트 이미지 네임!!!###
    outputs:
      DOCKER_IMAGE_NAME: ${{ env.DOCKER_IMAGE_NAME }}
      OWNER_LC: ${{ env.OWNER_LC }}
    steps:
      - uses: actions/checkout@v4
      - name: application-secret.yml 생성
        env:
          APPLICATION_SECRET: ${{ secrets.APPLICATION_SECRET_YML }}
        run: echo "$APPLICATION_SECRET" > backend/src/main/resources/application-secret.yml
      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v2
      - name: 레지스트리 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ANIDOC_TOKEN }}
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
        env:
          OWNER: "${{ github.repository_owner }}"
      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v3
        with:
          context: backend
          push: true
          cache-from: type=registry,ref=ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:cache
          cache-to: type=registry,ref=ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:cache,mode=max
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:${{ needs.makeTagAndRelease.outputs.tag_name }},
            ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [buildImageAndPush]
    env:
      DOCKER_IMAGE_NAME: ${{ needs.buildImageAndPush.outputs.DOCKER_IMAGE_NAME }}
      OWNER_LC: ${{ needs.buildImageAndPush.outputs.OWNER_LC }}
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      # 🔍 디버깅 로그 추가
      - name: Debug 환경변수 출력
        run: |
          echo "=== 환경변수 디버깅 ==="
          echo "DOCKER_IMAGE_NAME: ${{ env.DOCKER_IMAGE_NAME }}"
          echo "OWNER_LC: ${{ env.OWNER_LC }}"
          echo "완전한 이미지 이름: ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
          echo "======================="
      
      - name: 인스턴스 ID 가져오기
        id: get_instance_id
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=dev-ec2-1" "Name=instance-state-name,Values=running" --query "Reservations[].Instances[].InstanceId" --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "찾은 인스턴스 ID: $INSTANCE_ID"
          
          # 인스턴스가 실제로 찾아졌는지 확인
          if [ -z "$INSTANCE_ID" ]; then
            echo "❌ ERROR: 인스턴스를 찾을 수 없습니다!"
            exit 1
          fi
      
      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@master
        id: ssm
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          instance-ids: ${{ env.INSTANCE_ID }}
          working-directory: /
          comment: Deploy
          command: |
            echo "=== 배포 시작 ==="
            echo "현재 시간: $(date)"
            echo "현재 유저: $(whoami)"
            echo "Docker 버전: $(docker --version)"
            
            echo "=== GHCR 로그인 시도 ==="
            echo "${{ secrets.ANIDOC_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            echo "=== 이미지 풀링 시작 ==="
            echo "풀링할 이미지: ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
            
            if docker pull ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest; then
              echo "✅ 이미지 풀링 성공"
            else
              echo "❌ 이미지 풀링 실패"
              echo "사용 가능한 이미지들:"
              docker images
              exit 1
            fi
            
            echo "=== 기존 컨테이너 정리 ==="
            if docker stop app1 2>/dev/null; then
              echo "✅ app1 컨테이너 중지됨"
            else
              echo "ℹ️ app1 컨테이너가 실행중이 아님"
            fi
            
            if docker rm app1 2>/dev/null; then
              echo "✅ app1 컨테이너 제거됨"
            else
              echo "ℹ️ app1 컨테이너가 존재하지 않음"
            fi
            
            echo "=== 네트워크 확인 ==="
            if docker network ls | grep common; then
              echo "✅ common 네트워크 존재"
            else
              echo "⚠️ common 네트워크가 없습니다. 생성합니다..."
              docker network create common
            fi
            
            echo "=== 새 컨테이너 실행 ==="
            if docker run -d --network common --name app1 -p 8080:8080 ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest; then
              echo "✅ 컨테이너 실행 성공"
              
              echo "=== 컨테이너 상태 확인 ==="
              docker ps -a | grep app1
              
              echo "=== 컨테이너 로그 확인 (최근 50줄) ==="
              docker logs --tail 50 app1
              
              echo "=== 포트 확인 ==="
              netstat -tlnp | grep 8080 || echo "8080 포트가 열리지 않았습니다"
              
            else
              echo "❌ 컨테이너 실행 실패"
              exit 1
            fi
            
            echo "=== dangling 이미지 정리 ==="
            docker rmi $(docker images -f "dangling=true" -q) 2>/dev/null || echo "정리할 dangling 이미지가 없습니다"
            
            echo "=== 배포 완료 ==="
            echo "최종 이미지 이름: ghcr.io/${{ env.OWNER_LC }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
      
      # SSM 명령 결과 확인
      - name: SSM 명령 결과 확인
        run: |
          echo "SSM 명령 ID: ${{ steps.ssm.outputs.command-id }}"
          echo "SSM 상태: ${{ steps.ssm.outputs.status }}"
